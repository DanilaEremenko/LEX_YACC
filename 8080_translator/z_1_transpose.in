/*@MAIN-----------------------------------------------*/
000:LXI SP;		/*initialize SP*/
001:200;
002:000;
003:LXI H;		/*v1 = HL - line element*/
004:202;	
005:000;
006:LXI D;		/*v2 = DE - row element*/
007:205;
010:000;
011:CALL;		/*@transpose_matrix*/
012:015;
013:000;
014:HLT;

/*@transpose_matrix-----------------------------------------------*/
/*@init_counter*/
015:MVI A;		
016:003;			/*ctr_val*/
017:PUSH PSW;		/*save line_index_shift*/
020:PUSH PSW;		/*save global_ctr*/

/*@exchange_elements*/
021:PUSH PSW;	/*save local_ctr = global_ctr*/
022:MOV A,M;	/*A = v1*/
023:PUSH PSW;	/*save v1*/
024:LDAX D;		/*A = v2*/
025:MOV M,A;	/*&v1 = v2*/
026:POP PSW;	/*A = v1*/
027:STAX D;		/*&v2 = v1*/

/*@check_counter*/
030:POP PSW;	/*get local_ctr*/
031:SUB;		/*ctr--*/
032:001;
033:JZ;			/*IF local_ctr == 0*/
034:057;
035:000;

/*@update_indexes*/
036:LXI B;			/*ELSE        -> line_index += 1*/
037:001;
040:000;
041:DAD B;			/*HL += 1*/
042:PUSH H;			/*save line_index*/
043:PUSH D;			/*save row_index*/
044:POP H;			/*HL = DE*/
045:LXI B;			
046:004;		
047:000;
050:DAD B;			/*HL += 4*/
051:PUSH H;			
052:POP D;			/*DE = DE + 4*/
053:POP H;			/*HL = HL + 1*/
054:JMP;
055:021;
056:000;

/*@update_next_indexes*/
057:POP PSW;		/*POP global_ctr*/
060:SUB;
061:001;
062:JZ;				/*repeat if global_ctr != 0*/
063:105;
064:000;
065:POP B;			/*BC = line_index_shift*/
066:DAD B;			/*HL = HL + BC (+3 first time, +4 second time)*/			
067:INX B;			/*line_index_shift++*/
070:PUSH B;			/*save line_index_shift*/
071:PUSH PSW;		/*save global_ctr*/
072:PUSH H;			/*save line index*/
073:LXI B;			
074:003;		
075:000;
076:DAD B;			/*HL += 3*/
077:PUSH H;			/*save row index*/
100:POP D;			/*DE = HL + 3 + 3*/
101:POP H;			/*HL = HL + 3*/
102:JMP;
103:021;
104:000;
105:RET;


/*MATRIX SOURCE
201:1;
202:1;
203:1;
204:1;
205:2;
206:2;
207:2;
210:2;
211:3;
212:3;
213:3;
214:3;
215:4;
216:4;
217:4;
220:4;
*/
